// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.4
// source: src/bfsp.cli.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "bfsp.cli";

export enum FileType {
  IMAGE = 0,
  TEXT = 1,
  UNKNOWN = 2,
  BINARY = 3,
  UNRECOGNIZED = -1,
}

export function fileTypeFromJSON(object: any): FileType {
  switch (object) {
    case 0:
    case "IMAGE":
      return FileType.IMAGE;
    case 1:
    case "TEXT":
      return FileType.TEXT;
    case 2:
    case "UNKNOWN":
      return FileType.UNKNOWN;
    case 3:
    case "BINARY":
      return FileType.BINARY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FileType.UNRECOGNIZED;
  }
}

export function fileTypeToJSON(object: FileType): string {
  switch (object) {
    case FileType.IMAGE:
      return "IMAGE";
    case FileType.TEXT:
      return "TEXT";
    case FileType.UNKNOWN:
      return "UNKNOWN";
    case FileType.BINARY:
      return "BINARY";
    case FileType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FileMetadata {
  id: string;
  chunks: { [key: number]: string };
  fileName: string;
  fileType: FileType;
  fileSize: number;
  directory: string[];
  createTime: number;
  modificationTime: number;
}

export interface FileMetadata_ChunksEntry {
  key: number;
  value: string;
}

export interface ViewFileInfo {
  id: string;
  token: string;
  fileEncKey: string;
}

function createBaseFileMetadata(): FileMetadata {
  return {
    id: "",
    chunks: {},
    fileName: "",
    fileType: 0,
    fileSize: 0,
    directory: [],
    createTime: 0,
    modificationTime: 0,
  };
}

export const FileMetadata = {
  encode(message: FileMetadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    Object.entries(message.chunks).forEach(([key, value]) => {
      FileMetadata_ChunksEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    if (message.fileName !== "") {
      writer.uint32(26).string(message.fileName);
    }
    if (message.fileType !== 0) {
      writer.uint32(32).int32(message.fileType);
    }
    if (message.fileSize !== 0) {
      writer.uint32(40).uint64(message.fileSize);
    }
    for (const v of message.directory) {
      writer.uint32(50).string(v!);
    }
    if (message.createTime !== 0) {
      writer.uint32(56).int64(message.createTime);
    }
    if (message.modificationTime !== 0) {
      writer.uint32(64).int64(message.modificationTime);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FileMetadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = FileMetadata_ChunksEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.chunks[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fileName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.fileType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.fileSize = longToNumber(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.directory.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.createTime = longToNumber(reader.int64() as Long);
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.modificationTime = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileMetadata {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      chunks: isObject(object.chunks)
        ? Object.entries(object.chunks).reduce<{ [key: number]: string }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = String(value);
          return acc;
        }, {})
        : {},
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      fileType: isSet(object.fileType) ? fileTypeFromJSON(object.fileType) : 0,
      fileSize: isSet(object.fileSize) ? globalThis.Number(object.fileSize) : 0,
      directory: globalThis.Array.isArray(object?.directory)
        ? object.directory.map((e: any) => globalThis.String(e))
        : [],
      createTime: isSet(object.createTime) ? globalThis.Number(object.createTime) : 0,
      modificationTime: isSet(object.modificationTime) ? globalThis.Number(object.modificationTime) : 0,
    };
  },

  toJSON(message: FileMetadata): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.chunks) {
      const entries = Object.entries(message.chunks);
      if (entries.length > 0) {
        obj.chunks = {};
        entries.forEach(([k, v]) => {
          obj.chunks[k] = v;
        });
      }
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.fileType !== 0) {
      obj.fileType = fileTypeToJSON(message.fileType);
    }
    if (message.fileSize !== 0) {
      obj.fileSize = Math.round(message.fileSize);
    }
    if (message.directory?.length) {
      obj.directory = message.directory;
    }
    if (message.createTime !== 0) {
      obj.createTime = Math.round(message.createTime);
    }
    if (message.modificationTime !== 0) {
      obj.modificationTime = Math.round(message.modificationTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileMetadata>, I>>(base?: I): FileMetadata {
    return FileMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileMetadata>, I>>(object: I): FileMetadata {
    const message = createBaseFileMetadata();
    message.id = object.id ?? "";
    message.chunks = Object.entries(object.chunks ?? {}).reduce<{ [key: number]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.fileName = object.fileName ?? "";
    message.fileType = object.fileType ?? 0;
    message.fileSize = object.fileSize ?? 0;
    message.directory = object.directory?.map((e) => e) || [];
    message.createTime = object.createTime ?? 0;
    message.modificationTime = object.modificationTime ?? 0;
    return message;
  },
};

function createBaseFileMetadata_ChunksEntry(): FileMetadata_ChunksEntry {
  return { key: 0, value: "" };
}

export const FileMetadata_ChunksEntry = {
  encode(message: FileMetadata_ChunksEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).uint64(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FileMetadata_ChunksEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileMetadata_ChunksEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileMetadata_ChunksEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: FileMetadata_ChunksEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileMetadata_ChunksEntry>, I>>(base?: I): FileMetadata_ChunksEntry {
    return FileMetadata_ChunksEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileMetadata_ChunksEntry>, I>>(object: I): FileMetadata_ChunksEntry {
    const message = createBaseFileMetadata_ChunksEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseViewFileInfo(): ViewFileInfo {
  return { id: "", token: "", fileEncKey: "" };
}

export const ViewFileInfo = {
  encode(message: ViewFileInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.fileEncKey !== "") {
      writer.uint32(26).string(message.fileEncKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ViewFileInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewFileInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fileEncKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ViewFileInfo {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      fileEncKey: isSet(object.fileEncKey) ? globalThis.String(object.fileEncKey) : "",
    };
  },

  toJSON(message: ViewFileInfo): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.fileEncKey !== "") {
      obj.fileEncKey = message.fileEncKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ViewFileInfo>, I>>(base?: I): ViewFileInfo {
    return ViewFileInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ViewFileInfo>, I>>(object: I): ViewFileInfo {
    const message = createBaseViewFileInfo();
    message.id = object.id ?? "";
    message.token = object.token ?? "";
    message.fileEncKey = object.fileEncKey ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
